{"version":3,"file":"ng-i18n-aot.directive.js","sourceRoot":"","sources":["../../src/locale-service/ng-i18n-aot.directive.ts"],"names":[],"mappings":"AA6BA,OAAO,EAEH,iBAAiB,EACjB,SAAS,EACT,KAAK,EAEL,WAAW,EACX,gBAAgB,EACnB,MAAM,eAAe,CAAC;AAMvB,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;;IAiBrD,4BAAY,gBAAkC,EAAE,iBAAmC,EAAE,sBAAwC,EAAE,uBAA0C;yBAH1I,KAAK;QAIhC,IAAI,CAAC,gBAAgB,GAAU,gBAAgB,CAAC;QAChD,IAAI,CAAC,iBAAiB,GAAS,iBAAiB,CAAC;QACjD,IAAI,CAAC,sBAAsB,GAAI,sBAAsB,CAAC;QACtD,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;QAGvD,IAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;KACvC;IAGM,4CAAe,GAAtB;QAAA,iBAYC;QAXG,IAAI,CAAC,mCAAmC,GAAG,IAAI,CAAC,gBAAgB,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,UAAC,OAAgB;YAE9H,KAAI,CAAC,sBAAsB,CAAC,KAAK,EAAE,CAAC;YAEpC,IAAG,OAAO,EAAE;gBACR,KAAI,CAAC,sBAAsB,CAAC,kBAAkB,CAAC,KAAI,CAAC,iBAAiB,CAAC,CAAC;aAC1E;YAGD,KAAI,CAAC,uBAAuB,CAAC,aAAa,EAAE,CAAC;SAChD,CAAC,CAAC;KACN;IAGM,wCAAW,GAAlB;QACI,IAAG,IAAI,CAAC,mCAAmC,EAAE;YACzC,IAAI,CAAC,mCAAmC,EAAE,CAAC;SAC9C;KACJ;0BAGY,yCAAS;uBAAC,EAAU;YAC7B,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;;;;;0BAIJ,+CAAe;uBAAC,MAAc;YACvC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;;;;;0BAIZ,kDAAkB;uBAAC,SAAkB;YAC9C,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;;;;;;gBA1DlC,SAAS,SAAC;oBACP,QAAQ,EAAE,aAAa;iBAC1B;;;gBALQ,gBAAgB;gBARrB,WAAW;gBACX,gBAAgB;gBALhB,iBAAiB;;;8BA8DhB,KAAK;oCAKL,KAAK;uCAKL,KAAK;;6BAvGV;;SAiDa,kBAAkB","sourcesContent":["/**\r\n * MIT License\r\n * \r\n * Copyright (c) 2017 - 2018 actra.development, Korntal-Muenchingen\r\n * Parts of the code: Copyright (c) 2014-2017 Google, Inc. http://angular.io\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * Basic libs\r\n */\r\nimport {\r\n    AfterViewInit,\r\n    ChangeDetectorRef,\r\n    Directive,\r\n    Input,\r\n    OnDestroy,\r\n    TemplateRef,\r\n    ViewContainerRef\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * Module components\r\n */\r\nimport { NgI18nAotService } from './ng-i18n-aot.service';\r\n\r\n\r\n@Directive({\r\n    selector: '[ngI18nAot]'\r\n})\r\nexport class NgI18nAotDirective implements AfterViewInit, OnDestroy {\r\n    protected ngI18nAotService: NgI18nAotService;\r\n    protected ngI18nAotServiceUnsubscribeCallback: () => void;\r\n    protected templateReference: TemplateRef<any>;\r\n    protected viewContainerReference: ViewContainerRef;\r\n    protected changeDetectorReference: ChangeDetectorRef;\r\n    protected id: string;\r\n    protected locale: string;\r\n    protected isDefault: boolean = false;\r\n    \r\n    \r\n    constructor(ngI18nAotService: NgI18nAotService, templateReference: TemplateRef<any>, viewContainerReference: ViewContainerRef, changeDetectorReference: ChangeDetectorRef) {\r\n        this.ngI18nAotService        = ngI18nAotService;\r\n        this.templateReference       = templateReference;\r\n        this.viewContainerReference  = viewContainerReference;\r\n        this.changeDetectorReference = changeDetectorReference;\r\n        \r\n        // Hide until the view is initialized\r\n        this.viewContainerReference.clear();\r\n    }\r\n    \r\n    \r\n    public ngAfterViewInit(): void {\r\n        this.ngI18nAotServiceUnsubscribeCallback = this.ngI18nAotService.subscribe(this.id, this.locale, this.isDefault, (display: boolean) => {\r\n            // Clear the view first, otherwise content may be replicated\r\n            this.viewContainerReference.clear();\r\n            \r\n            if(display) {\r\n                this.viewContainerReference.createEmbeddedView(this.templateReference);\r\n            }\r\n            \r\n            // Force change detection as with the newly created view changes for e.g. *ngIf might not be detected\r\n            this.changeDetectorReference.detectChanges();\r\n        });\r\n    }\r\n    \r\n    \r\n    public ngOnDestroy(): void {\r\n        if(this.ngI18nAotServiceUnsubscribeCallback) {\r\n            this.ngI18nAotServiceUnsubscribeCallback();\r\n        }\r\n    }\r\n    \r\n    \r\n    @Input() set ngI18nAot(id: string) {\r\n        this.id = id;\r\n    }\r\n    \r\n    \r\n    @Input() set ngI18nAotLocale(locale: string) {\r\n        this.locale = locale;\r\n    }\r\n    \r\n    \r\n    @Input() set ngI18nAotIsDefault(isDefault: boolean) {\r\n        this.isDefault = isDefault;\r\n    }\r\n}\r\n"]}