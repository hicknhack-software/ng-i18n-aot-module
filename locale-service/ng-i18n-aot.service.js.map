{"version":3,"file":"ng-i18n-aot.service.js","sourceRoot":"","sources":["../../src/locale-service/ng-i18n-aot.service.ts"],"names":[],"mappings":"AA6BA,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACzC,OAAO,EACN,eAAe,EAEf,MAAM,MAAM,CAAC;AAGd,IAAM,uBAAuB,GAAW,8BAA8B,CAAC;;IAWnE,0BAAwB,SAAmD;;;yBAPgB,EAAE;sBACF,uBAAuB;uBACvB,IAAI,eAAe,CAAS,uBAAuB,CAAC;iCACpD,KAAK;gCACL,EAAE;QAIzF,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC;QAC9B,IAAI,CAAC,oBAAoB,CAAC,iBAAiB,CAAC,CAAC;KAChD;IAMM,+CAAoB,GAA3B,UAA4B,iBAAkC;QAAlC,kCAAA,EAAA,yBAAkC;QAC1D,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;KAC9C;IAMM,+CAAoB,GAA3B;QACI,OAAO,IAAI,CAAC,iBAAiB,CAAC;KACjC;IAMM,0CAAe,GAAtB,UAAuB,OAAgC;QACnD,KAAI,IAAI,IAAI,IAAI,OAAO,EAAE;YACrB,IAAG,CAAC,OAAO,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;gBAC9B,SAAS;aACZ;YAED,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5C;KACJ;IAMM,yCAAc,GAArB,UAAsB,IAAY,EAAE,IAAY;QAC5C,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;KAC/B;IAMM,oCAAS,GAAhB,UAAiB,IAAY;QACzB,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,QAAQ,KAAK,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KAC9F;IAMM,wCAAa,GAApB,UAAqB,IAAY;QAC7B,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;KAC7D;IAMM,qCAAU,GAAjB;QACI,OAAO,IAAI,CAAC,SAAS,CAAC;KACzB;IAMM,2CAAgB,GAAvB,UAAwB,IAAY;QAChC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;KAC/B;IAMM,uCAAY,GAAnB;QACI,IAAI,CAAC,SAAS,GAAG,EAAE,CAAC;KACvB;IAMM,oCAAS,GAAhB,UAAiB,MAA4B;QAA5B,uBAAA,EAAA,aAA4B;QACzC,IAAG,QAAQ,KAAK,OAAO,MAAM,IAAI,IAAI,CAAC,oBAAoB,EAAE,IAAI,CAAC,IAAI,CAAC,SAAS,CAAS,MAAM,CAAC,EAAE;YAC7F,OAAO;SACV;QAED,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,uBAAuB,CAAC;QAEhD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QAC/B,IAAI,CAAC,SAAS,CAAS,MAAM,CAAC,CAAC;KAClC;IAMM,oCAAS,GAAhB;QACI,OAAO,IAAI,CAAC,MAAM,CAAC;KACtB;IAMM,0CAAe,GAAtB;QACI,OAAO,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;KACtC;IAMM,0CAAe,GAAtB,UAAuB,MAAe;QAClC,OAAO,uBAAuB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;KAC3E;IAMM,oCAAS,GAAhB,UAAiB,EAAU,EAAE,MAAc,EAAE,SAAkB,EAAE,QAAoC;QAArG,iBAUC;QATG,IAAG,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE;YAC/B,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,GAAgD,EAAE,CAAC;SAC/E;QAED,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,QAAQ,CAAC;QAEnF,IAAI,CAAC,aAAa,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;QAEvF,OAAO,cAAQ,OAAO,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC;KACpG;IAMS,oCAAS,GAAnB,UAAoB,MAAc;QAAlC,iBAIC;QAHG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,OAAO,CAAC,UAAC,EAAU;YAClD,KAAI,CAAC,MAAM,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;SAC3B,CAAC,CAAC;KACN;IAMS,iCAAM,GAAhB,UAAiB,EAAU,EAAE,MAAc;QAA3C,iBAQC;QAPG,IAAI,SAAS,GAAW,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAC,WAAmB,IAAK,OAAA,CAAC,CAAC,CAAC,WAAW,KAAK,MAAM,CAAC,EAA1B,CAA0B,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,uBAAuB,CAAC;QAErK,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAC,WAAmB;YAC7D,KAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,SAAS,KAAK,WAAW,CAAC,CAAC,CAAC;YAEpE,OAAO,IAAI,CAAC;SACf,CAAC,CAAC;KACN;IAKS,wCAAa,GAAvB,UAAwB,EAAU,EAAE,YAAoB,EAAE,aAAqB;QAC3E,IAAI,SAAS,GAAW,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,UAAC,WAAmB,IAAK,OAAA,CAAC,CAAC,CAAC,WAAW,KAAK,aAAa,CAAC,EAAjC,CAAiC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,uBAAuB,CAAC;QACnL,IAAI,QAAQ,GAAG,IAAI,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC;QACvD,IAAG,QAAQ,EAAE;YACT,QAAQ,CAAC,CAAC,SAAS,KAAK,YAAY,CAAC,CAAC,CAAC;SAC1C;KACJ;;gDA3KY,QAAQ;gDAA2C,QAAQ;;2BA/C5E;;SAuCa,gBAAgB","sourcesContent":["/**\r\n * MIT License\r\n * \r\n * Copyright (c) 2017 - 2018 actra.development, Korntal-Muenchingen\r\n * Parts of the code: Copyright (c) 2014-2017 Google, Inc. http://angular.io\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * Basic libs\r\n */\r\nimport { Optional } from '@angular/core';\r\nimport {\r\n\tBehaviorSubject,\r\n\tObservable\r\n} from 'rxjs';\r\n\r\n\r\nconst DefaultLocaleIdentifier: string = '_____default-$$$-locale_____';\r\n\r\n\r\nexport class NgI18nAotService {\r\n    protected localeMap: {[key: string]: string}                                             = {};\r\n    protected locale: string                                                                 = DefaultLocaleIdentifier;\r\n    protected locale$: BehaviorSubject<string>                                               = new BehaviorSubject<string>(DefaultLocaleIdentifier);\r\n    protected forceLocaleExists: boolean                                                     = false;\r\n    protected translationIdMap: {[key: string]: {[key: string]: (display: boolean) => void}} = {};\r\n    \r\n    \r\n    constructor(@Optional() locales: {[key: string]: string} = {}, @Optional() forceLocaleExists: boolean = false) {\r\n        this.registerLocales(locales);\r\n        this.setForceLocaleExists(forceLocaleExists);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set the flag to force locale existance on the locale map when trying to set the current locale\r\n     */\r\n    public setForceLocaleExists(forceLocaleExists: boolean = false) {\r\n        this.forceLocaleExists = forceLocaleExists;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the flag to force locale existance on the locale map when trying to set the current locale\r\n     */\r\n    public getForceLocaleExists(): boolean {\r\n        return this.forceLocaleExists;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Register multiple locales on the locale map\r\n     */\r\n    public registerLocales(locales: {[key: string]: string}): void {\r\n        for(let code in locales) {\r\n            if(!locales.hasOwnProperty(code)) {\r\n                continue;\r\n            }\r\n            \r\n            this.registerLocale(code, locales[code]);\r\n        }\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Register a locale on the locale map\r\n     */\r\n    public registerLocale(code: string, name: string): void {\r\n        this.localeMap[code] = name;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Check if a locale exists on the map\r\n     */\r\n    public hasLocale(code: string): boolean {\r\n        return !!(this.localeMap.hasOwnProperty(code) && 'string' === typeof this.localeMap[code]);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the locale name for a locale code\r\n     */\r\n    public getLocaleName(code: string): string | null {\r\n        return this.hasLocale(code) ? this.localeMap[code] : null;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get all registered locales\r\n     */\r\n    public getLocales(): {[key: string]: string} {\r\n        return this.localeMap;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Unregister a locale\r\n     */\r\n    public unregisterLocale(code: string): void {\r\n        delete this.localeMap[code];\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Clear all locales\r\n     */\r\n    public clearLocales(): void {\r\n        this.localeMap = {};\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Set a locale, automatically renders all translatable containers\r\n     */\r\n    public setLocale(locale: string | null = null): void {\r\n        if('string' === typeof locale && this.getForceLocaleExists() && !this.hasLocale(<string>locale)) {\r\n            return;\r\n        }\r\n        \r\n        this.locale = locale || DefaultLocaleIdentifier;\r\n        \r\n        this.locale$.next(this.locale);\r\n        this.renderAll(<string>locale);\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the currently set locale\r\n     */\r\n    public getLocale(): string {\r\n        return this.locale;\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Get the locale stream\r\n     */\r\n    public getLocaleStream(): Observable<string> {\r\n        return this.locale$.asObservable();\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Check if the (current) locale is the default locale\r\n     */\r\n    public isDefaultLocale(locale?: string): boolean {\r\n        return DefaultLocaleIdentifier === (locale ? locale : this.getLocale());\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Subscribe to changes, renderer callback is executed on every change with a flag indicating if new locale matches the one the renderer is subscribed for\r\n     */\r\n    public subscribe(id: string, locale: string, isDefault: boolean, renderer: (display: boolean) => void): () => void {\r\n        if(!(id in this.translationIdMap)) {\r\n            this.translationIdMap[id] = <{[key: string]: (display: boolean) => void}>{};\r\n        }\r\n\r\n        this.translationIdMap[id][isDefault ? DefaultLocaleIdentifier : locale] = renderer;\r\n\r\n        this.renderPartial(id, isDefault ? DefaultLocaleIdentifier : locale, this.getLocale());\r\n        \r\n        return () => { delete this.translationIdMap[id][isDefault ? DefaultLocaleIdentifier : locale]; };\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Render all translatable containers, used after changing the locale\r\n     */\r\n    protected renderAll(locale: string): void {\r\n        Object.keys(this.translationIdMap).forEach((id: string) => {\r\n            this.render(id, locale);\r\n        });\r\n    }\r\n    \r\n    \r\n    /**\r\n     * Render a single translatable container identified by id\r\n     */\r\n    protected render(id: string, locale: string): void {\r\n        let setLocale: string = Object.keys(this.translationIdMap[id]).filter((checkLocale: string) => !!(checkLocale === locale)).length ? locale : DefaultLocaleIdentifier;\r\n        \r\n        Object.keys(this.translationIdMap[id]).every((checkLocale: string): boolean => {\r\n            this.translationIdMap[id][checkLocale]((setLocale === checkLocale));\r\n            \r\n            return true;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Render one locale of a single translatable container\r\n     */\r\n    protected renderPartial(id: string, targetLocale: string, currentLocale: string): void {\r\n        let setLocale: string = Object.keys(this.translationIdMap[id]).filter((checkLocale: string) => !!(checkLocale === currentLocale)).length ? currentLocale : DefaultLocaleIdentifier;\r\n        let renderer = this.translationIdMap[id][targetLocale];\r\n        if(renderer) {\r\n            renderer((setLocale === targetLocale));\r\n        }\r\n    }\r\n}"]}